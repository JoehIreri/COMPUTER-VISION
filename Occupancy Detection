import cv2
import pickle
import cvzone
import numpy as np

# Video(MP4)
cap = cv2.VideoCapture('ParkingLotVideo.mp4')

# Load the parking space positions from a pickled file
with open('Parkinglotpositions', 'rb') as f:
    posList = pickle.load(f)

width, height = 95, 47


def preprocess_frame(frame):
    """
    Preprocess the input frame for parking space detection.
    Convert the frame to grayscale and apply Gaussian blur.
    """
    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    blurred_frame = cv2.GaussianBlur(gray_frame, (3, 3), 1)
    return gray_frame, blurred_frame


def apply_thresholding(blurred_frame):
    """
    Apply adaptive thresholding to the blurred frame.
    Convert the image to binary (white lines on black background).
    """
    thresholded_frame = cv2.adaptiveThreshold(blurred_frame, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 25, 16)
    return thresholded_frame


def remove_noise(binary_frame):
    """
    Remove noise from the binary frame using median blur.
    """
    median_blurred_frame = cv2.medianBlur(binary_frame, 5)
    return median_blurred_frame


def dilate_image(filtered_frame):
    """
    Dilate the image to fill gaps in the parking spaces.
    """
    kernel = np.ones((5, 5), np.uint8)
    dilated_frame = cv2.dilate(filtered_frame, kernel, iterations=1)
    return dilated_frame


def check_parking_space(processed_frame, original_frame):
    """
    Check parking space occupancy based on pixel count.
    Draw rectangles and display the count of free spaces on the original image.
    """
    space_counter = 0

    for pos in posList:
        x, y = pos

        # Crop the processed image
        cropped_frame = processed_frame[y:y+height, x:x+width]

        # Count the pixels in each parking space
        count = cv2.countNonZero(cropped_frame)

        # Put the count of pixels of each place in rectangles
        cvzone.putTextRect(original_frame, str(count), (x, y+height-5), scale=1.5, thickness=2, offset=0, colorR=(0, 0, 255))

        if count < 900:
            color = (0, 255, 0)  # Green color for free spaces
            thickness = 3
            space_counter += 1
        else:
            color = (255, 0, 0)  # Blue color for occupied spaces
            thickness = 2

        # Draw rectangles around parking spaces
        cv2.rectangle(original_frame, pos, (pos[0]+width, pos[1]+height), color, thickness)

    # Display the count of free spaces on the original image
    cvzone.putTextRect(original_frame, f'Free: {space_counter}/{len(posList)}', (100, 50), scale=3, thickness=5, offset=20, colorR=color)


while True:
    # Infinite loop for video processing

    # Reset video frame position if at the end
    if cap.get(cv2.CAP_PROP_POS_FRAMES) == cap.get(cv2.CAP_PROP_FRAME_COUNT):
        cap.set(cv2.CAP_PROP_POS_FRAMES, 0)

    # Read a frame from the video
    success, frame = cap.read()

    # Preprocess the frame for parking space detection
    gray_frame, blurred_frame = preprocess_frame(frame)

    # Apply thresholding to the blurred frame
    thresholded_frame = apply_thresholding(blurred_frame)

    # Remove noise from the binary frame
    median_blurred_frame = remove_noise(thresholded_frame)

    # Dilate the image to fill gaps in the parking spaces
    dilated_frame = dilate_image(median_blurred_frame)

    # Check parking space occupancy
    check_parking_space(dilated_frame, frame)

    # Display processed images
    cv2.imshow("Original Image", frame)
    cv2.imshow("Gray Frame", gray_frame)
    cv2.imshow("Blurred Image", blurred_frame)
    cv2.imshow("Thresholded Image", median_blurred_frame)

    # Resize windows
    cv2.resizeWindow("Original Image", 600, 400)
    cv2.resizeWindow("Gray Frame", 600, 400)
    cv2.resizeWindow("Blurred Image", 600, 400)
    cv2.resizeWindow("Thresholded Image", 600, 400)

    # Wait for a key press to slow down the video display
    cv2.waitKey(10)
